logging:
  level:
    org.apache.http: debug
    com.yd.telescope: debug
    root: info

spring:
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driverClassName: com.mysql.jdbc.Driver
    url: jdbc:mysql://10.19.105.60:3306/telescope?useUnicode=true&characterEncoding=utf8
    username: ggs
    password: KUhuRSwgurvG8Ftd
#    url: jdbc:mysql://localhost:3306/telescope?useUnicode=true&characterEncoding=utf8
#    username: root
#    password: root
    initialSize: 1
    minIdle: 3
    maxActive: 20
    # 配置获取连接等待超时的时间
    maxWait: 60000
    # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
    timeBetweenEvictionRunsMillis: 60000
    # 配置一个连接在池中最小生存的时间，单位是毫秒
    minEvictableIdleTimeMillis: 30000
    validationQuery: select 'x'
    testWhileIdle: true
    testOnBorrow: false
    testOnReturn: false
    # 打开PSCache，并且指定每个连接上PSCache的大小
    poolPreparedStatements: true
    maxPoolPreparedStatementPerConnectionSize: 20
    # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
    filters: stat,wall,slf4j
    # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
    # 合并多个DruidDataSource的监控数据
    #useGlobalDataSourceStat: true
  jpa:
    properties:
      hibernate:
        show_sql: true
        format_sql: true
        #其实这个参数的作用主要用于：自动创建|更新|验证数据库表结构。如果不是此方面的需求建议set value="none".
        #validate         加载hibernate时，验证创建数据库表结构
        #create           每次加载hibernate，重新创建数据库表结构，这就是导致数据库表数据丢失的原因。
        #create-drop      加载hibernate时创建，退出是删除表结构
        #update           加载hibernate自动更新数据库结构
        #总结：
        #1.请慎重使用此参数，没必要就不要随便用。
        #2.如果发现数据库表丢失，请检查hibernate.hbm2ddl.auto的配置
        hbm2ddl:
          auto: none
  thymeleaf:
   cache: false
   content-type: text/html
  devtools:
    restart:
      trigger-file: spring-devtools.properties