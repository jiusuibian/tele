# 数据源配置
spring.datasource.url=jdbc:mysql://localhost:3306/dbtest?useUnicode=true&characterEncoding=UTF-8
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.username=root
spring.datasource.password=gzy123

# JPA配置
#hibernate提供了根据实体类自动维护数据库表结构的功能，可通过spring.jpa.hibernate.ddl-auto来配置，有下列可选项：
#1、create：启动时删除上一次生成的表，并根据实体类生成表，表中数据会被清空。
#2、create-drop：启动时根据实体类生成表，sessionFactory关闭时表会被删除。
#3、update：启动时会根据实体类生成表，当实体类属性变动的时候，表结构也会更新，在初期开发阶段使用此选项。
#4、validate：启动时验证实体类和数据表是否一致，在我们数据结构稳定时采用此选项。
#5、none：不采取任何措施。
#spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.hbm2ddl.auto=update
#spring.jpa.show-sql用来设置hibernate操作的时候在控制台显示其真实的sql语句。
spring.jpa.show-sql=true
#让控制器输出的json字符串格式更美观。
spring.jackson.serialization.indent-output=true

#########################kafka 配置信息#########################
spring.kafka.bootstrap-servers=192.168.100.4:9092
spring.kafka.consumer.group-id=telescopseData
##以下4项配置指定消息key和消息体的编解码方式。
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer